// <auto-generated />
using AvailabilityAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AvailabilityAPI.Migrations
{
    [DbContext(typeof(DbContextClass))]
    [Migration("20240911122256_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AvailabilityAPI.Model.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorAvailabilityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorAvailabilityId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("AvailabilityAPI.Model.DoctorAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DoctorAvailabilities");
                });

            modelBuilder.Entity("AvailabilityAPI.Model.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailabilityId")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("AvailabilityAPI.Model.Availability", b =>
                {
                    b.HasOne("AvailabilityAPI.Model.DoctorAvailability", "DoctorAvailability")
                        .WithMany("AvailabilityData")
                        .HasForeignKey("DoctorAvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorAvailability");
                });

            modelBuilder.Entity("AvailabilityAPI.Model.Slot", b =>
                {
                    b.HasOne("AvailabilityAPI.Model.Availability", "Availability")
                        .WithMany("Slots")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Availability");
                });

            modelBuilder.Entity("AvailabilityAPI.Model.Availability", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("AvailabilityAPI.Model.DoctorAvailability", b =>
                {
                    b.Navigation("AvailabilityData");
                });
#pragma warning restore 612, 618
        }
    }
}
